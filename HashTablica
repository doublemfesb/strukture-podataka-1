/***
Napisati kod koji za zadane podatke studenata (maticni broj, ime i prezime)
pravi hash tablicu sa zasebnim redovima. Tablica ima 11 mjesta,
a funkcija za preslikavanje kljuc racuna da se zbraja ASCII vrijednost
prvih pet slova prezimena i zatim racuna ostatak cjelobrojnog dijeljenja
te vrijednosti s velicinom tablice. Studenti s istim kljucem se pohranjuju u
vezanu listu sortiranu po prezimenima i imenima.
Kada se tablica izgradi treba ispisati cijelu tablicu
(naglasiti na kojem kljucu se nalaze koji podaci) te ponuditi mogucnost da
se za odredenog studenta (prezime i ime) ispiï¿½e njegov maticni broj.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME 1024
#define HASH_SIZE 11

typedef struct student* Pozicija;
struct student
{
	int broj;
	char ime[MAX_NAME];
	char prezime[MAX_NAME];
	Pozicija next;
};

typedef struct hash* Hash;
struct hash
{
	int el;
	Pozicija stablo;
};

int GarbageCollector(Hash H);
int DeleteList(Pozicija P);
int GarbageCollector(Hash);
void IspisListe(Pozicija);
void IspisHasha(Hash);
Pozicija Novicvor(char* ime, char* prezime, int br);
int IzracunajKljuc(Pozicija P);
int UbaciUHash(Hash H, Pozicija student);
int UcitajIzDatoteke(Hash);
Pozicija UnesiUListu(Pozicija H, Pozicija student);
int StudentCompare(Pozicija P, Pozicija S);

int main()
{
	int succ = 0;
	Hash tablica = NULL;
	int i = 0;

	tablica = (Hash)malloc(HASH_SIZE * sizeof(struct hash));
	if (tablica == NULL)
		return -1;

	//postavljanje broja redaka i sve pokazivace na NULL;
	while (i < HASH_SIZE)
	{
		tablica[i].el = i;
		tablica[i].stablo = NULL;
		i++;
	}

	succ = UcitajIzDatoteke(tablica);

	IspisHasha(tablica);

	succ = GarbageCollector(tablica);
	if (succ == 0)
		printf("Sve je obrisano");
	return 0;
}
int UcitajIzDatoteke(Hash H)
{
	int succ = 0;
	char* fileName = NULL;
	char* ime = NULL;
	char* prezime = NULL;
	FILE* fp = NULL;
	int br = 0;
	Pozicija student = NULL;

	fileName = (char*)malloc(sizeof(char) * MAX_NAME);
	if (fileName == NULL)
		return -1;

	ime = (char*)malloc(sizeof(char) * MAX_NAME);
	if (ime == NULL)
		return -1;

	prezime = (char*)malloc(sizeof(char) * MAX_NAME);
	if (prezime == NULL)
		return -1;

	printf("Unesite ime datoteke\n");
	scanf("%s",fileName);
	strcat(fileName, ".txt");

	fp = fopen(fileName, "r");
	if (fp == NULL)
		return -2;

	while (!feof(fp))
	{
		fscanf(fp,"%s %s %d",ime,prezime,&br);
		student = Novicvor(ime, prezime, br);
		succ = UbaciUHash(H, student);
	}
	fclose(fp);
	return 0;
}
//struktura studenta sa svim podatcima
Pozicija Novicvor(char*ime, char*prezime, int br)
{
	Pozicija nova = NULL;
	nova = (Pozicija)malloc(sizeof(struct student));
	if (nova == NULL)
		return NULL;
	strcpy(nova->ime, ime);
	strcpy(nova->prezime, prezime);
	nova->broj = br;
	nova->next = NULL;
	return nova;
}

//unos u tablicu
int UbaciUHash(Hash H, Pozicija student)
{
	//racunanje kljuca
	int kljuc = IzracunajKljuc(student);
	//neznam sta ovo tocno znaci ali ako skontas javi  i meni :)
	/* (H[kljuc].el != kljuc)
	{
		H[kljuc].stablo =NULL;
	}*/

	//salje se kao argument pokazivac na redak sa vrijednosti kljuca i cvor studenta
	H[kljuc].stablo = UnesiUListu(H[kljuc].stablo, student);
	return 0;

}
//racunanje kljuca po ASCII tablici ,tj.u koji ce se redak spremat
int IzracunajKljuc(Pozicija P)
{
	int i = 0;
	int sum = 0;

	while (i < HASH_SIZE && i < 5)
	{
		sum += P->prezime[i];
		i++;
	}
	return sum % HASH_SIZE;
}
//unos u listu,kao argument poslan cvor studenta i glava,tj.pokazivac na redak tablice
Pozicija UnesiUListu(Pozicija H, Pozicija student)
{
	Pozicija temp = H;
	//ako nema nijednog elementa
	if (temp == NULL) return student;

	while (temp->next!= NULL && StudentCompare(temp->next, student) > 0)
		temp = temp->next;
	//ako su jednaki da im zbroji ocjene
	if (temp->next != NULL && StudentCompare(temp->next, student) == 0)
	{
		temp->next->broj += student->broj;
		//nakon sta se pribroji tempu je visak pa se brise
		free(student);
	}
	else
	{
		student->next = temp->next;
		temp->next = student;
	}
	//za uspostavit vezu
	return H;
	
}
//usporedujemo abecedno studente
int StudentCompare(Pozicija P, Pozicija S)
{
	int succ = 0;
	succ = strcmp(P->prezime, S->prezime);
	//ako su razliciti da vrati 1 ili -1, a ako ne ide usporedit po imenu
	if (succ != 0)
		return succ;
	else
	{
		succ = strcmp(P->ime, S->ime);
		return succ;
	}
}
//ispis tablice
void IspisHasha(Hash H)
{
	int i = 0;

	while (i < HASH_SIZE)
	{
		printf("U %d retku:\n", H->el);
		//saljemo svaki redak tablice
		IspisListe(H->stablo);
		i++;
		H++;
	}
	//isto tako vrijedi

	/*while (i < HASH_SIZE)
	{
		printf("U %d retku:\n", H[i].el);
		IspisListe(H[i].stablo);
		i++;
	}*/
}

//ispis liste
void IspisListe(Pozicija P)
{
	while (P != NULL)
	{
		printf("%s %s %d\n\n", P->ime, P->prezime, P->broj);
		P = P->next;
	}
}

//za brisanje hash tablice
int GarbageCollector(Hash H)
{
	int i = 0;
	while (i < HASH_SIZE)
	{
		//salje se kao argument svaki redak tablice da se obrisu sve liste
		//onda kad se sve liste obrisu,brise se tablica(da idemo obrnuto,vezane liste bi ostale u memoriji i nebi ih mogli dobaviti)
		DeleteList(H[i].stablo);
		i++;
	}
	//za brisanje tablice
	free(H);
	return 0;
}
//za obrisat sve liste nekog retka
int DeleteList(Pozicija P)
{
	//ako taj redak nema liste samo da vrati 0
	if (P == NULL) return 0;

	//ako ima brise sve elemente liste
	Pozicija temp;
	while (P->next != NULL) 
	{
		temp = P->next;
		P->next = temp->next;
		free(temp);
	}
	return 0;
}
