/**
Napisati program koji iz datoteke čita podatke o broju bodova koje je jedan student dobio na ispitu
(struct _student{char ime[128];char prezime[128];int broj_bodova; int relativni_broj_bodova;struct
_student *left; ;struct _student right;}) i sprema ih u binarno stablo pretraživanja. (Napomena : 0 <
broj_bodova <= 100). Ispisati binarno stablo na „inorder“ način.
U tako kreiranom binarnom stablu potrebno je za svakog od studenata izračunati i relativan broj bodova
po formuli: relativan_broj_bodova=( broj_bodova / MAX(broj_bodova) ). Ispisati binarno stablo na
„preorder“ način.
**/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100.0
#ifndef BUFFER
#define BUFFER 1024
#endif

typedef struct _student* Stablo;
struct _student
{
	char ime[128];
	char prezime[128];
	int broj_bodova;
	float rel_br_bodova;
	Stablo L;
	Stablo D;
};
int UnosRel(Stablo);
void IspisIn(Stablo);
void IspisPre(Stablo);
Stablo UnosUStablo(Stablo, char*, char*, int);
Stablo UcitavanjeIzdatoteke(Stablo);
int main()
{
	int succ;
	Stablo St = NULL;

	St = UcitavanjeIzdatoteke(St);
	IspisIn(St);

	printf("\n");
	succ = UnosRel(St);
	IspisPre(St);
	return 0;
}
Stablo UcitavanjeIzdatoteke(Stablo S)
{
	int br = 0;
	char* fileName = NULL;
	char* str = NULL;
	char* buff = NULL;
	FILE* fp = NULL;

	fileName = (char*)malloc(BUFFER * sizeof(char));
	if (fileName == NULL)
		return NULL;

	str = (char*)malloc(BUFFER * sizeof(char));
	if (str == NULL)
		return NULL;

	buff = (char*)malloc(BUFFER * sizeof(char));
	if (buff == NULL)
		return NULL;

	printf("Unesite datoteku za citanje");
	scanf("%s", fileName);
	strcat(fileName, ".txt");

	fp = fopen(fileName, "r");
	if (fp == NULL)
		return NULL;

	while (!feof(fp))
	{
		fscanf(fp, "%s %s %d", str,buff,&br);
		S = UnosUStablo(S, str, buff, br);
	}
	fclose(fp);
	return S;
}
Stablo UnosUStablo(Stablo S, char*s, char*b, int br)
{
	if (S == NULL)
	{
		S = (Stablo)malloc(sizeof(struct _student));
		if (S == NULL)
			return NULL;
		strcpy(S->ime, s);
		strcpy(S->prezime, b);
		S->broj_bodova = br;
		S->L = NULL;
		S->D = NULL;
	}
	else if (strcmp(S->ime, s) < 0)
		S->L = UnosUStablo(S->L, s, b, br);
	else if (strcmp(S->ime, s) > 0)
		S->D = UnosUStablo(S->D, s, b, br);
	else
	{
		printf("vec postoji");
	}
	return S;

}
void IspisIn(Stablo S)
{
	if(S != NULL)
	{
		IspisIn(S->L);
		printf("%s %s %d\n", S->ime, S->prezime, S->broj_bodova);
		IspisIn(S->D);
	}
}
void IspisPre(Stablo S)
{
	if(S != NULL)
	{
		printf("%s %s %d %.2f\n", S->ime, S->prezime, S->broj_bodova, S->rel_br_bodova);
		IspisPre(S->L);
		IspisPre(S->D);
	}
}
int UnosRel(Stablo S)
{
	if (S != NULL) 
	{
		UnosRel(S->L);
		UnosRel(S->D);

		float rel = (float)S->broj_bodova / MAX;
		S->rel_br_bodova = rel;
	}
	return 0;
}
