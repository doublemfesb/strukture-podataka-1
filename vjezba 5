#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>

#define OKEj 0
#define NEVALJA -1

typedef struct Broj *Pozicija;
struct Broj {
    int br;
    Pozicija next;
};
int StvaranjeNoveListe(Pozicija, Pozicija, Pozicija);
int Sortiranje(Pozicija);
int IzbacivanjeDuplica(Pozicija);
int StvaranjePresjeka(Pozicija, Pozicija, Pozicija);
int UnosK(Pozicija);
void Ispis(Pozicija);
Pozicija Unos(int);
int main()
{
    struct Broj Br1;
    struct Broj Br2;
    struct Broj Br3;
    struct Broj Br4;
    int i, m, n,x;
    
    Pozicija Broj1 = NULL;
    Br1.next = NULL;
    Pozicija Broj2 = NULL;
    Br2.next = NULL;
    Pozicija Broj3 = NULL;
    Br3.next = NULL;
    Pozicija Broj4 = NULL;
    Br4.next = NULL;
    
    printf("Koliko clanova zelite da ima prva lista?\n");
    scanf("%d", &m);
     printf("Koliko clanova zelite da ima druga lista?\n");
    scanf("%d", &n);
    printf("Unesite prvu listu\n");
    for(i = 0; i < m; i++) {
        x=UnosK(&Br1);
        if(x==-1)
            return x;
    }
      printf("Unesite drugu listu:\n");
    for(i = 0; i < n; i++) {
        x=UnosK(&Br2);
        if(x==-1)
            return x;
    }
    
    printf("Sada ce se ispisati unija dvije prethodno unesene liste:\n");
    x=StvaranjeNoveListe(&Br1, &Br2, &Br3);
    if(x==-1)
        return x;
    Sortiranje(&Br3);
    IzbacivanjeDuplica(&Br3);
    Ispis(&Br3);
    
    printf("Sada ce se ispisati presjek\n");
    x=StvaranjePresjeka(&Br1, &Br2, &Br4);
    if(x==-1)
        return x;
    Sortiranje(&Br4);
    IzbacivanjeDuplica(&Br4);
    Ispis(&Br4);
}
int UnosK(Pozicija B)
{
    while(B->next != NULL)
        B = B->next;
    Pozicija nova;
    nova = (Pozicija)malloc(sizeof(struct Broj));
    if(nova==NULL){
        printf("greska pri alokaciji!");
        return NEVALJA;
    }
    scanf("%d", &nova->br);
    B->next = nova;
    nova->next = NULL;
    return OKEJ;
}  
int StvaranjeNoveListe(Pozicija a, Pozicija b, Pozicija c)
{
    a = a->next;
    b = b->next;
    while(a != NULL) {
        c->next = Unos(a->br);
        if(c->next==NULL){
            printf("greska pri alokaciji!");
            return NEVALJA;
        }
        a = a->next;
        c = c->next;
    }
    while(b != NULL) {
        c->next = Unos(b->br);
        if(c->next==NULL){
            printf("greska pri alokaciji");
            return NEVALJA;
        }
        b = b->next;
        c = c->next;
    }
    return OKEJ;
}
void Ispis(Pozicija B)
{
    B = B->next;
    while(B != NULL)
    {
        printf("%d\n", B->br);
        B = B->next;
    }
}
Pozicija Unos(int x) {
    Pozicija q;
    q = (Pozicija)malloc(sizeof(struct Broj));
    q->br = x;
    q->next = NULL;
    return q;
   
}
int Sortiranje(Pozicija S) {
    int temp = 0, x;
    Pozicija m = NULL;
    S = S->next;
    Pozicija q = S;
    do {
        x = 0;
        S = q;
        while(S->next != m && S->next != NULL)
        {
            if(S->br > S->next->br) {
            temp = S->br;
            S->br = S->next->br;
            S->next->br = temp;
            x = 1;
            }
         S = S->next;
        }
        m = S;
    }while(x);
    return 0;
}
int IzbacivanjeDuplica(Pozicija S) {
    Pozicija zabris=NULL;
    S = S->next;
    while(S->next != NULL) {
        while(S->br == S->next->br) {
        zabris= S->next;
        S->next=S->next->next;
        free(zabris);
        }
    S = S->next;
    }
    return 0;
}
int StvaranjePresjeka(Pozicija A, Pozicija B, Pozicija D) {
    A = A->next;
    B = B->next;
    Pozicija p = B;
    while(A->next != NULL) {
        B=p;
        while(B->next!=NULL) {
            if(A->br == B->br) {
                D->next = Unos(A->br);
                if(D->next==NULL){
                    printf("greska pri alokaciji");
                    return NEVALJA;
                }
                D = D->next;
            }
            B = B->next;
        }
        A = A->next;
    }
    return OKEJ;
}
