/****
Napisati program koji omogućava rad s binarnim stablom pretraživanja. Treba
omogućiti unošenje novog elementa u stablo, ispis elemenata, brisanje i pronalaženje
nekog elementa
***/
#define CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define ERROR -1
#define OKEJ 0

typedef struct cvorStabla Cvor;
typedef struct cvorStabla*Pozicija;
typedef struct cvorStabla*Stablo;
struct cvorStabla{
    int El;
    Stablo L;
    Stablo D;
};

Stablo BrisiEl(int, Stablo);
Stablo TraziEl(int,Stablo);
Stablo Dodaj(int, Stablo);
void Ispis(Stablo);
Pozicija Trazimin(Stablo S);

int main()
{
    int x,y;
    Stablo St=NULL;
    Stablo Tr=NULL;
    Stablo Obrisan=NULL;
    
    St=Dodaj(3,St);
    St=Dodaj(4,St);
    St=Dodaj(2,St);
    St=Dodaj(5,St);
    printf("\n");
    Ispis(St);
    printf("\n");
    printf("koji broj zelite naci?\n");
    scanf("%d",&x);
    Tr=TraziEl(x,St);
    if(Tr==NULL){
        printf("broj nije naden\n");
    }
    else
        printf("broj %d je naden",Tr->El);
    printf("koji element zelite obrisati?\n");
    scanf("%d",&y);
    Obrisan=BrisiEl(y,St);
    printf("\n");
    printf("nakon brisanja\n");
    Ispis(St);
    return 0;
}
Stablo Dodaj(int x, Stablo S)
{
    if(S==NULL){
        S=(Stablo)malloc(sizeof(struct cvorStabla));
        if(S==NULL){
            printf("greska pri alokaciji");
            return ERROR;
        }
        S->El=x;
        S->L=NULL;
        S->D=NULL;
    }
    else if(S->El>x)
        S->L=Dodaj(x,S->L);
    else if(S->El<x)
        S->D=Dodaj(x,S->D);
    else
        printf("element vec postoji");
    return S;
}
void Ispis(Stablo S)
{
    if(S!=NULL){
        printf("%d",S->El);
        Ispis(S->L);
        Ispis(S->D);
    }
    
}
Stablo TraziEl(int x,Stablo S)
{
    if(S==NULL)
        return NULL;
    if(S->El>x)
        return TraziEl(x,S->L);
    else if(S->El<x)
        return TraziEl(x,S->D);
    else
        return S;
}
Stablo BrisiEl(int x, Stablo S)
{
    Stablo temp;
    if(S==NULL){
        printf("element nije naden\n");
        return NULL;
    }
    if(S->El>x)
        S->L=BrisiEl(x,S->L);
        
    else if(S->El<x)
        S->D=BrisiEl(x,S->D);
        
    else 
    {
        if(S->L!=NULL && S->D !=NULL)
        {
            temp=Trazimin(S->D);
            S->El=temp->El;
            S->D=BrisiEl(S->El,S->D);
        }
        else
        {
            temp=S;
            if(NULL==S->L)
                S=S->D;
            else S=S->L;
                free(temp);
        }
    }
    return S;
}
Pozicija Trazimin(Stablo S)
{
    if(S!=NULL && S->L!=NULL)
        Trazimin(S->L);
    return S;
}
