/*Definirati strukturu osoba(ime, prezime, godina rođenja) i napisati program koji :
a) dinamički dodaje novi element na početak liste,
b) ispisuje listu,
c) dinamički dodaje novi element na kraj liste,
d) pronalazi element u listi(po prezimenu),
e) briše određeni element iz liste,
U zadatku se ne smiju koristiti globalne varijable.*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ERROR (-1)
#define OKEJ (0)
typedef struct student* cvor;
struct student
{
	char ime[64];
	char prez[64];
	int godina;
	cvor next;
};
cvor TraziPrethodnika(cvor, char*);
int BrisiStudenta(cvor,char*);
cvor Trazi(cvor,char*);
int DodajNaPocetak(cvor);
int DodajNaKraj(cvor);
void Ispis(cvor);
int main()
{
	int n;
	char c, a;
	int succ;
	char* prez;
	prez = (char*)malloc(1024 * sizeof(char));
	struct student stud;
	cvor Stud;
	stud.next = NULL;
	while (1)
	{
		printf("Odaberite operaciju:\nP-dodaj na pocetak\nK-dodaj na kraj\nO-obrisi element\nT-trazi element\n");
		scanf(" %c", &c);
		switch (c)
		{
		case 'P':
		{
			printf("Koliko studenata zelite dodati na pocetak?\n");
			scanf("%d", &n);
			while (n > 0)
			{
				succ = DodajNaPocetak(&stud);
				if (succ == -1) {
					printf("greska pri alokacji");
					return ERROR;
				}
				n--;
			}
			Ispis(stud.next);
			break;
		}
		case 'K':
		{
			printf("Koliko studenata zelite dodati na kraj");
			scanf("%d", &n);
			while (n > 0)
			{
				succ = DodajNaKraj(&stud);
				if (succ == -1) {
					printf("greska pri alokaciji");
					return ERROR;
				}
				n--;
			}
			Ispis(stud.next);
			break;
		}
		case 'O':
		{
			printf("kojeg studenta zelite obrisati\n");
			scanf("%s", prez);
			succ = BrisiStudenta(&stud, prez);
			if (succ == -2) {
				printf("student nije naden");
				return -2;
			}
			Ispis(stud.next);
			break;
		}
		case 'T':
		{
			printf("upisite prezime koje zelite naci\n");
			scanf("%s", prez);
			Stud = Trazi(&stud, prez);
			if (Stud == NULL)
			{
				printf("Student ne postoji");
				return -2;
			}
			printf("Trazili ste studenta: %s %s %d\n", Stud->ime, Stud->prez, Stud->godina);
			break;
		}
		default:
			printf("Unijeli ste krivo slovo");
		}
		printf("Zelite li izabrati novu?(D za da, N za izlaz)\n");
		scanf(" %c", &a);
		if (a == 'N')
			break;
	}
	free(prez);
	return 0;
}

int DodajNaPocetak(cvor S)
{
	cvor q = NULL;
	q = (cvor)malloc(sizeof(struct student));
	if(q==NULL)
		return ERROR;
	printf("unesite ime prezime i godinu\n");
	scanf("%s %s %d", q->ime, q->prez, &q->godina);
	q->next = S->next;
	S->next = q;
	return OKEJ;

}
void Ispis(cvor S)
{
	while (S != NULL)
	{
		printf("%s %s %d\n", S->ime, S->prez, S->godina);
		S = S->next;
	}
}
int DodajNaKraj(cvor S)
{
	cvor q = NULL;
	while (S->next != NULL)
		S = S->next;
	q = (cvor)malloc(sizeof(struct student));
	if (q == NULL)
		return ERROR;
	printf("unesite ime prezime i godinu\n");
	scanf("%s %s %d", q->ime, q->prez, &q->godina);
	q->next = S->next;
	S->next = q;
	return OKEJ;

}
cvor Trazi(cvor S,char* p)
{
		while (S!= NULL && strcmp(S->prez, p) != 0)
		{
			S = S->next;
		}
	if (NULL == S) return NULL;
	return S;
}
cvor TraziPrethodnika(cvor S, char*p)
{
	cvor temp = S;
	S = S->next;
	while (S != NULL && strcmp(S->prez, p) != 0)
	{
		temp = S;
		S = S->next;
	}
	if (NULL == S) return NULL;
	return temp;

}
int BrisiStudenta(cvor S,char*p)
{
	cvor temp;
	S = TraziPrethodnika(S, p);
	if (S == NULL)
		return -2;
	temp = S->next;
	S->next = temp->next;
	free(temp);
	return OKEJ;
}
