/**
Za dvije sortirane liste L1 i L2 (mogu se pročitati iz datoteke ili unijeti ručno, bitno je
samo da su sortirane), napisati program koji stvara novu vezanu listu tako da računa:
a) L1L2,
b) L1L2.
Liste osim pokazivača na slijedeću strukturu imaju i jedan cjelobrojni element, po
kojem su sortirane.
**/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ERROR (-1)
#define BUFFER 1024
#define PRAZNO (-2)
#define NEOTVARA (-3)
#define OKEJ (0)
typedef struct lista* cvor;
struct lista
{
	int el;
	cvor next;
};
int Presjek(cvor, cvor, cvor);
int Unija(cvor, cvor,cvor);
void Ispis(cvor);
int UcitajIzdatoteke(cvor);
int SortUnos(cvor, int);
int main()
{
	int succ;
	struct lista L1;
	struct lista L2;
	struct lista L3;
	struct lista L4;
	L4.next = NULL;
	L3.next = NULL;
	L1.next = NULL;
	L2.next = NULL;

	succ = UcitajIzdatoteke(&L1);
	if (succ == -1)
	{
		printf("Greska pri alokaciju");
		return ERROR;
	}
	if (succ == -2)
	{
		printf("Ne moze biti prazan string");
		return PRAZNO;
	}
	if (succ == -3)
	{
		printf("datoteka se ne moze otvoriti");
		return NEOTVARA;
	}

	succ = UcitajIzdatoteke(&L2);
	if (succ == -1)
	{
		printf("Greska pri alokaciju");
		return ERROR;
	}
	if (succ == -2)
	{
		printf("Ne moze biti prazan string");
		return PRAZNO;
	}
	if (succ == -3)
	{
		printf("datoteka se ne moze otvoriti");
		return NEOTVARA;
	}

	printf("\nIspis prve liste\n");
	Ispis(L1.next);
	printf("\nIspisdruge liste\n");
	Ispis(L2.next);

	succ=Unija(&L1,&L2,&L3);
	if (succ == -1)
	{
		printf("greska pri alokacji");
		return ERROR;
	}
	printf("\nIspis unije:\n");
	Ispis(L3.next);

	succ = Presjek(&L1, &L2, &L4);
	if (succ == -1)
	{
		printf("greska pri alokacji");
		return ERROR;
	}
	printf("\nIspis presjeka:\n");
	Ispis(L4.next);

	return 0;
}
int SortUnos(cvor S, int x)
{
	struct lista temp;
	temp.next = NULL;
	while (S->next != NULL && S->next->el > x)
		S = S->next;
	if (S->next != NULL && S->next->el == x)
		SortUnos(&temp,x);
	else {
		cvor q;
		q = (cvor)malloc(sizeof(struct lista));
		if (q == NULL)
			return ERROR;
		q->el = x;
		q->next = S->next;
		S->next = q;
	}
	
	return 0;
}
int UcitajIzdatoteke(cvor S)
{
	int x;
	char* fileName = NULL;
	FILE* fp = NULL;

	fileName = (char*)malloc(BUFFER*sizeof(char));
	if (fileName == NULL)
		return ERROR;
	printf("Unesite ime datoteke\n");
	scanf("%s",fileName);
	if (strlen(fileName) == 0)
		return PRAZNO;
	strcat(fileName, ".txt");

	fp = fopen(fileName, "r");
	if (fp == NULL)
		return NEOTVARA;

	while (!feof(fp))
	{
		int a;
		fscanf(fp,"%d",&a);
		x=SortUnos(S, a);
		if (x == -1)
			return ERROR;
	}
	fclose(fp);
	return OKEJ;
}
void Ispis(cvor S)
{
	while (S != NULL)
	{
		printf("%d\n",S->el);
		S = S->next;
	}

}
int Unija(cvor S, cvor P, cvor C)
{
	int x;
	S = S->next;
	P = P->next;
	struct lista temp;
	temp.next = NULL;
	while (S != NULL)
	{
		x=SortUnos(C, S->el);
		if (x == -1)
			return ERROR;
		S = S->next;
	}
	while (P != NULL)
	{
		x=SortUnos(C, P->el);
		if (x == -1)
			return ERROR;
		P = P->next;
	}
	return OKEJ;
}
int Presjek(cvor S, cvor P, cvor C)
{
	int x;
	S = S -> next;
	P = P->next;
	cvor pocetak = P;
	while (S != NULL)
	{
		while (P != NULL) {
			if (S->el == P->el) {
				x = SortUnos(C, P->el);
				if (x == -1)
					return ERROR;
			}
			P = P->next;
		}
		S = S->next;
		P = pocetak;
	}
	return 0;
}
