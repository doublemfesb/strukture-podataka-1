/******************************************************************************
Napisati program koji iz datoteke čita postfiks izraz i zatim korištenjem stoga računa
rezultat. Stog je potrebno realizirati preko vezane liste.
*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define ERROR -1
#define OKEJ 0
#define NEVALJA -2
#define PRAZAN -3
#define BUFFER 1024
#define OPERATOR -5
typedef struct cvor*stog;
struct cvor{
    int el;
    stog next;
};
int CitanjeIzDatoteke(stog);
int DaLiJeBroj(char*,int*);
stog stvaranjeStrukture(stog,int);
int push(int,stog);
int pop(stog);
void Racunanjepostfixa(FILE*,stog);
int main()
{
    int rez=0;
    struct cvor cv;
    cv.next=NULL;
    
    rez=CitanjeIzDatoteke(&cv);
    if(rez==-1 || rez==-2 || rez==-3)
        return rez;
    printf("rezultat je:%d",rez);
    return 0;
}
stog stvaranjeStrukture(stog S,int x)
{
    stog novi=NULL;
    S=(stog)malloc(sizeof(struct cvor));
    novi=S;
    novi->el=x;
    return novi;
}
int push(int x,stog S)
{
    stog novi=NULL;
    novi=stvaranjeStrukture(S,x);
    if(novi==NULL){
        printf("greska pri alokaciji");
        return ERROR;
    }
    novi->next=S->next;
    S->next=novi;
    return OKEJ;
    
}
int pop(stog S)
{
    int x;
    stog temp;
    if(S!=NULL){
        /*if(S->next==NULL){
            printf("ne moze se vise skinuti stog je prazan\n");
            return PRAZAN;
        }*/
        
            temp=S->next;
            S->next=temp->next;
            x=temp->el;
            free(temp);
        
        
    }
    return x;
}
int CitanjeIzDatoteke(stog S)
{
    int rezultat;
    FILE*fp=NULL;
    char*FileName=NULL;
    FileName=(char*)malloc(BUFFER*sizeof(char));
    if(FileName==NULL){
        printf("greska pri alokacji");
        return ERROR;
    }
    printf("unesite datoteku za citanje\n");
    scanf("%s",FileName);
    if(strchr(FileName,".")==0)
        strcat(FileName,".txt");
    fp=fopen(FileName,"r");
    if(fp==NULL){
        printf("ne moze se otvoriti datoteka");
        return NEVALJA;
    }
    while(!feof(fp))
    {
        Racunanjepostfixa(fp,S);
    }
    rezultat=pop(S);
    fclose(fp);
    return rezultat;
}

int DaLiJeBroj(char*str,int* broj)
{
    int x;
    x=sscanf(str,"%d",broj);
    if(x==EOF || x==0 || x!=1)
        return ERROR;
    else
        return OKEJ;
}

void Racunanjepostfixa(FILE*f,stog S)
{
    int x,broj;
    int z;
    char*str=NULL;
    str=(char*)malloc(BUFFER*sizeof(char));
    if(str==NULL)
    {
        printf("greska pri alokaciji");
        return ERROR;
    }
    fscanf(f,"%s",str);
    x=DaLiJeBroj(str,&broj);
    printf("%d",x);
    if(x==0)
    {
        z=push(broj,S);
        if(z==-1)
            return z;
    }
        else
        {
            int a,b;
            a=pop(S);
            printf("%d",a);
            if(a==-3)
                return a;
            
            b=pop(S);
            printf("%d",b);
            if(b==-3)
                return b;
            if(strcmp(str,'+')==0)
            {
                z=push(b+a,S);
                if(z==-1)
                    return z;
            }
            else if(strcmp(str,'-')==0)
            {
                z=push(b-a,S);
                if(z==-1)
                    return z;
            }
            else if(strcmp(str,'*')==0)
            {
                z=push(b*a,S);
                if(z==-1)
                    return z;
            }
            else
                printf("znak nije operand");
        }
}
    
