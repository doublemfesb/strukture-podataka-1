/****
Napisati program koji pomoću vezanih listi simulira rad:
a) stoga,
b) reda.
Napomena: Funkcija "push" sprema cijeli broj, slučajno generirani u opsegu od 10 -100
***/
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include <stdlib.h>
#define PRAZNO (-2)
#define ERROR (-1)
#define OKEJ (0)
typedef struct cvor* stog;
struct cvor {
	int el;
	stog next;
};

typedef struct Cvor* red;
struct Cvor
{
	int El;
	red next;
};
void IspisReda(red);
int StaviURed(red, int);
int SkiniSaReda(red);
void IspisStoga(stog);
int RandBroj(int, int);
int StaviUStog(stog, int);
int SkiniSaStoga(stog);
int main()
{
	int succ, x;
	char c;
	struct Cvor Red;
	struct cvor Stog;
	Red.next = NULL;
	Stog.next = NULL;

	while (1)
	{
		printf("Odaberite operaciju za STOG:\n S-stavi na stog\nK-skini sa stoga\nI-ispis\n");
		scanf(" %c", &c);
		switch (c)
		{
		case 'S':
			x = RandBroj(10, 100);
			succ = StaviUStog(&Stog, x);
			if (succ == -1)
				return ERROR;
			break;
		case 'K':
			succ = SkiniSaStoga(&Stog);
			if (succ == -2)
			{
				printf("Ne moze se vise skinuti sa stoga,prazan je");
				return PRAZNO;
			}
			break;
		case 'I':
			IspisStoga(Stog.next);
			break;
		default:
			printf("krivo slovo");

		}
		printf("Zelite li novu operaciju(N za izlaz)\n");
		scanf(" %c", &c);
		if (c == 'N')
			break;
	}
	

	while (1)
	{
		printf("\nOdaberite operaciju za RED:\n J-stavi na red\nL-skini sa reda\nI-ispis\n");
		scanf(" %c", &c);
		switch (c)
		{
		case 'J':
			x = RandBroj(10, 100);
			succ = StaviURed(&Red, x);
			if (succ == -1)
				return ERROR;
			break;
		case 'L':
			succ = SkiniSaReda(&Red);
			if (succ == -2)
			{
				printf("Ne moze se vise skinuti sa reda,prazan je");
				return PRAZNO;
			}
			break;
		case 'I':
			IspisReda(Red.next);
			break;
		default:
			printf("krivo slovo");

		}
		printf("Zelite li novu operaciju(N za izlaz)\n");
		scanf(" %c", &c);
		if (c == 'N')
			break;
	}

	return 0;

}
int RandBroj(int x, int y)
{
	int g;
	g = rand() % (y - x) + x;
	return g;
}
int SkiniSaStoga(stog S)
{
	if (S->next == NULL) 
		return PRAZNO;
	else
	{
		stog temp;
		temp = S->next;
		S->next = temp->next;
		free(temp);
	}
	
	return OKEJ;
}
int StaviUStog(stog S, int x)
{
	stog q;
	q = (stog)malloc(sizeof(struct cvor));
	if (q == NULL)
		return ERROR;
	q->el = x;
	q->next = S->next;
	S->next = q;
	return OKEJ;
}
void IspisStoga(stog S)
{
	while (S != NULL)
	{
		printf("%d\t", S->el);
		S = S->next;
	}
	printf("\n");

}
void IspisReda(red S)
{
	while (S != NULL)
	{
		printf("%d\t", S->El);
		S = S->next;
	}
	printf("\n")
}
int StaviURed(red S, int x)
{
	while (S->next != NULL)
		S = S->next;
	red q;
	q = (red)malloc(sizeof(struct Cvor));
	if (q == NULL)
		return ERROR;
	q->El = x;
	q-> next = S->next;
	S->next = q;
	return OKEJ;
}
int SkiniSaReda(red S)
{
	if (S->next == NULL)
		return PRAZNO;
	else
	{
		red temp = S->next;
		S->next = temp->next;
		free(temp);
	}
	return OKEJ;
}
